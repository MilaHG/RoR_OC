1. créer une page
2. controlleurs et variables
3. boucles et conditions dans les vues
4. routes et controlleurs
5. le layout
6. créer une BDD
    6.1- créer une table
    6.2- ajouter, modifier, supprimer des lignes
    6.3- Utiliser les données sur le site
    6.4- Ajoutez un formulaire de création



❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
mémo
lancer le serveur
<cmd>
    rails server
    OU
    rails s

==> localhost:3000

❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
1. créer une page
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

<cmd>
    rails generate controller pages home

==> localhost:3000/pages/home


❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
2. maniez les contrôleurs et les variables
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

Parmi les fichiers générés dans le chapitre précédent, ouvrez avec votre éditeur de texte le fichier app/controllers/pages_controller.rb
Le code situé à l’intérieur de ce fichier s’exécutera avant le HTML de notre fichier app/views/pages/home.html.erb.

Testez le code suivant en assignant la valeur 4 à une variable dans ce fichier :

        class PagesController < ApplicationController
          def home
            @variable = 4
          end
        end

Et dans la vue app/views/pages/home.html.erb :

        <h1>Bienvenue !</h1>
        <p>Ceci est ma première variable : <%= @variable %>.</p>

Lancez le serveur et affichez la page dans votre navigateur. Vous verrez « 4 » apparaître.

Les symboles « <% … %> » permettent d’exécuter du Ruby, et le symbole « = » est un raccourci pour puts. Dans notre cas, nous affichons une variable définie dans la fonction home du contrôleur PagesController. Dans un contrôleur, seules les variables commençant par arobase (@) sont accessibles depuis la vue.

On dit que la classe PagesController est un contrôleur (controller en anglais). Un contrôleur est un fichier qui s’exécute juste avant une vue.


❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
3. Mettez des conditions et des boucles dans les vues
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

Vous avez vu comment afficher une variable dans les vues. Juste avec cela, vous ne ferez pas grand chose.

Voici comment faire une condition dans la vue :

        <h1>Bienvenue !</h1>
        <p>Ceci est ma première variable : <%= @variable %>.</p>

        <% if @variable == 42 %>
          Super, la variable vaut 42 !
        <% else %>
          Mince, la variable ne vaut pas 42 !
        <% end %>

Notez l’absence du symbole « = », car ici nos lignes de Ruby ne doivent rien afficher. En effet un IF n'affiche rien, c'est
le code entre le IF et le ELSE ou celui entre le ELSE et le END qui sera affiché.

Et voici un exemple de boucle :

        <h1>Bienvenue !</h1>
        <p>Ceci est ma première variable : <%= @variable %>.</p>

        <% @variable.times do |i| %>
          <%= i %>
        <% end %>

Qui affichera « 0123 ». Si vous ne comprenez pas pourquoi, je vous invite tester avec irb le code suivant :

        4.times do |i|
          puts i
        end

Vous ne vous souvenez plus comment utiliser irb ? Revoyez ce chapitre du cours sur Ruby.

Je vous recommande vivement de mettre le moins de code Ruby possible dans une vue.
Mettez votre Ruby dans la fonction home du contrôleur, puis mettez le résultat de votre code dans une variable qui commence par @, puis affichez dans la vue la variable en question. C’est plus propre !
Pour faire simple : mettre le plus possible de Ruby dans les fichiers Ruby, et le moins possible de Ruby dans les fichiers HTML.


❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
4. utilisez les routes et les contrôleurs
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

Faisons le point : vous avez créé une page HTML et vous êtes maintenant capable d’y mettre du Ruby.
Mais vous ne savez toujours pas :
   - choisir l’adresse de votre page (vous êtes coincé avec /pages/home) ;
   - créer d’autres pages.

Ouvrez le fichier config/routes.rb. Vous y trouverez ceci :

        Rails.application.routes.draw do
          get 'pages/home'
          # puis plein de commentaires
          # pages -> c'est le controlleur => app/controllers/pages_controller.rb
          # home -> c'est le fichier HTML => app/views/pages/home.html.erb
        end

Le « pages/home » correspond à ce que vous voyez dans l’adresse http://localhost:3000/pages/home.
Comme Rails est intelligent, il sait que cette adresse va exécuter le code de la fonction home du contrôleur PagesController.
Mais alors, comment personnaliser cette adresse ? Ou plutôt, pour employer le vocabulaire de Rails : comment personnaliser cette route ?

Il est possible de faire un lien explicite entre la route et le contrôleur à exécuter.
Par exemple, testez le code suivant :

        Rails.application.routes.draw do
          get 'castor' => 'pages#home'
          # puis plein de commentaires
        end

Allez sur http://localhost:3000/castor. La même page qu’avant s’affiche ! « pages#home » signifie que la route castor doit aller chercher, dans le contrôleur PagesController, la fonction home.

MES FICHIERS [config/routes.rb]
        Rails.application.routes.draw do
          # get 'pages/home'
          # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html
          # pages -> c'est le controlleur => app/controllers/pages_controller.rb
          # home -> c'est le fichier HTML => app/views/pages/home.html.erb
          # si je laisse en l'état l'url pour afficher cette page est localhost:3000/pages/home
          # pour changer cela on met en commentaire la ligne 2 (get 'pages/home')
          # et on réécrit la route :
          # get 'castor' => 'pages#home'
          # la page d'accueil 'home' s'affichera avec l'url localhost:3000/castor
          # si je veux que ma page d'accueil s'affiche directement sans rien après localhost:3000/
          # on commente la ligne :
          # get 'castor' => 'pages#home'
          # get 'route' => 'controlleur#fonction_dans_le_controlleur'
          # et on utilise le mot clé root :
          root 'pages#home'
        end

À vous ! Faites une nouvelle page. Vous avez besoin :
   - d’une nouvelle fonction dans un contrôleur ;
   - d’un fichier HTML rangé dans app/views/nom_du_contrôleur/nom_de_la_fonction.html.erb ;
   - d’une route dans config/routes.rb.

Comment associer l’adresse « http://localhost:3000/ » à une vue ?  Dans le fichier de routes (config/routes.rb), utilisez la fonction root (racine en anglais) :

        Rails.application.routes.draw do
          root 'pages#home'
          # puis plein de commentaires
        end


❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
5. Utilisez le layout
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

Vous avez maintenant une ou deux pages dans votre application. Pour éviter de répéter toutes les balises HTML obligatoire (doctype, html, head, title…) dans les vues, la structure HTML est partagée dans ce que l’on appelle un layout.

Observez le fichier app/views/layouts/application.html.erb :

        <!DOCTYPE html>
        <html>
        <head>
          <title>Castor</title>
          <%= stylesheet_link_tag 'application', media: 'all' %>
          <%= javascript_include_tag 'application' %>
          <%= csrf_meta_tags %>
        </head>

        <body>
          <%= yield %>
        </body>
        </html>

        //// MES FICHIERS ////
        <!DOCTYPE html>
        <html>
          <head>
            <title>Castor</title>
            <%= csrf_meta_tags %>
            <%= csp_meta_tag %>

            <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
            <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
          </head>

          <body>
            <%= yield %>
          </body>
        </html>

Le contenu de vos vues viendra s’immiscer à la place de « <%= yield %> ».
Si vous retirez cette ligne, vos pages ne s’afficheront plus !

Les lignes de Ruby dans le head permettent d’inclure tous vos fichiers CSS et JavaScript dans votre site sans avoir à rajouter une ligne par fichier.
Pour ajouter du CSS dans votre site, modifiez le fichier app/assets/stylesheets/application.css, ou les autres fichiers de ce même répertoire ;

Pour ajouter du JS dans votre site, modifiez le fichier app/assets/javascripts/application.js, ou les autres fichiers de ce même répertoire.


❄️❄️❄️❄️❄️❄️❄️❄️❄️❄
6. Gérer la BDD
❄️❄️❄️❄️❄️❄️❄️❄️❄️❄

https://sqlitebrowser.org/dl/

    6.1 - Créez votre première table

Avec Ruby on Rails, l’une des premières choses à faire est de réfléchir aux tables dont nous aurons besoin
pour stocker les données de notre site.

Le projet que nous allons construire ensemble est un gestionnaire de livres à lire.
Je veux, sur mon site, pouvoir ajouter les livres que je veux lire et retirer ceux que j’ai déjà lus.

Il nous faut donc une table « Livres », où chaque entrée sera un livre en particulier.
Nous n’avons besoin que d’une colonne, « Titre ».
Quand je veux ajouter un livre à lire, j’ajoute une entrée ; et quand je l’ai lu, je la supprime.

        _______ books _______
        | title |
        |_______|____________

Avant de vous dire comment créer cette table, j’aimerais m’arrêter sur une citation célèbre dans le monde informatique :
Il n’y a que deux choses difficiles en informatique : l’invalidation du cache et nommer les choses. — Phil Karlton

Laissons l’invalidation du cache de côté, ça ne nous concerne pas. Nommer les choses est moins simple qu’il n’y paraît.

Rails a sa façon de nommer les choses que nous allons suivre.
Voici les règles concernant les noms des tables et colonnes :

   - tout en anglais, sans accent, en minuscules ;
   - les espaces sont remplacés par des underscores « _ » ;
   - le nom des tables doit être le pluriel de ce que représente une entrée ;
   - le nom des colonnes est au singulier.

Ainsi, Livres devient « books » et Titre devient « title ».

Passons au code ! Dans votre terminal, dans votre répertoire castor, faites :

        rails generate migration TableBooks

Ce qui va générer dans le dossier db/migrate/ le fichier *_table_books.rb, avec la date et l’heure à la place de l’astérisque.
TableBooks est le nom que l'on choisit de donner à la migration.

Ouvrez ce fichier avec votre éditeur de texte. Il contient actuellement ceci :

        class TableBooks < ActiveRecord::Migration
          def change
          end
        end

On dit que ce fichier ruby est une migration.
Il permet de changer la structure de votre base de données.
Changer la structure d’une base de données, c’est ajouter, supprimer ou modifier une table ou une colonne.
C’est comme remplir la première ligne d’un tableur avec le nom des colonnes.
Si ces noms changent, il faut faire une (nouvelle) migration pour changer sa structure.

Il n’y a pas besoin de migration si l’on ajoute ou supprime une entrée, comme nos trois utilisateurs de la capture d’écran du chapitre précédent.

Dans une migration, on liste les tables et colonnes à créer (ou supprimer).
Pour notre application, voici ce que nous devons ajouter à ce fichier :

        class TableBooks < ActiveRecord::Migration
          def change
            create_table :books
            add_column :books, :title, :string
          end
        end

Deux étapes :
    - Nous utilisons la fonction create_table, qui prend pour argument le nom de la table à créer ;
    - Nous ajoutons une colonne avec la fonction add_column, qui prend trois arguments :
        . le nom de la table sur laquelle ajouter la colonne,
        . le nom de la colonne
        . et son type.

Comme les variables en ruby, les colonnes d’une base de données peuvent être de différentes natures, que l’on appelle types.
En voici une liste incomplète, à titre indicatif :
    - string pour les textes de moins de 255 caractères ;
    - text pour les textes pouvant faire plus de 255 caractères ;
    - integer pour un nombre sans virgule ;
    - float pour un nombre à virgule ;
    - datetime pour une date et heure.

Vous avez écrit votre migration, parfait.
Maintenant, il faut qu’elle soit prise en compte.
Sans cela, elle n’aura aucun effet, la table (migration) n'existe pas encore. Pour cela, exécutez la commande suivante :

        rake db:migrate

La commande rake est une boite à outils. Elle permet de faire plein de choses, notamment d’exécuter les migrations pour qu’elles soient prises en compte.
Une migration ne s’exécute qu’une seule fois. Si vous faites une 2e fois cette commande, il ne se passera rien.
Ce qui veut dire que si vous avez oublié quelque chose dans votre migration, il vous faudra en générer une autre, dans un nouveau fichier ! Et dans cette autre migration, vous n’aurez pas besoin de répéter ce qui vous avez déjà fait, n’y mettez que ce qu’il vous manque.

Pour exploiter notre base de données avec Rails, pour ajouter et supprimer des lignes, il nous manque un fichier qui fait la liaison entre notre base et notre code.
Créez le fichier app/models/book.rb avec ce contenu :

        class Book < ActiveRecord::Base
        end

On dit que ce fichier, ou cette classe, est un modèle. Un modèle est une classe Ruby qui représente une table d’une base de données. Notez comme le nom du modèle est le même que celui de la table, mais au singulier. C’est grâce à cette convention de nommage que Rails fait le rapprochement entre notre classe et notre table.

Pour vérifier que tout va bien, dans le terminal, tapez cette commande :

        rails console

Cette commande est un « super irb ». C’est un irb qui inclut toutes les classes de votre site. Dans la console rails, tapez :

        Book.new (créé une nouvelle instance de la table)
        ou
        Book (accède à la classe correspondant aux éléments de la table TableBooks)

Le résultat doit être :
        #<Book id: nil, title: nil>
        ou
        Book(id: integer, title: string)

Rails a bien fait la liaison avec votre base de données, c’est pour cela que l’on voit notre colonne « title » apparaître. Tapez exit pour sortir de la console rails.

--- mémo ---
Il y a plusieurs « zones » dans lesquelles vous travaillez :

    le terminal, qui sert principalement à lancer des commandes (il suffit des les écrire et d’appuyer sur ↲ Entrée), telles que les rails generate, rake db:migrate, rails server pour voir votre site sur votre navigateur et à lancer la rails console ;

    la rails console, qui sert à exécuter ponctuellement du code pour comprendre comment les choses fonctionnent dans Rails. Cela n’affecte pas votre code source, mais peut affecter les données de votre base ;

    la console ruby irb, qui sert à exécuter ponctuellement du code Ruby. Il est indépendant du code que vous avez écrit, de ce fait il n’intègre pas les fonctionnalités de Rails. Je recommande d’utiliser tout le temps rails console à la place ;

    vos fichiers de code source dans votre éditeur de texte, pour modifier votre site, lui apporter des fonctionnalités et corriger des bugs.
--- mémo ---

    6.2- ajouter, modifier et supprimer des lignes

dans rails console (on peut y accéder avec la <cmd> rails console ou en raccourci rails c)

Votre base de données est prête. Votre application Rails est prête. Tout est bon, apprenons à manipuler nos données !

Retournez sur la console rails. Première mission : ajouter une entrée dans notre table. Faites une à une ces commandes :

        mon_livre = Book.new
        mon_livre.title = "Dictionnaire"
        mon_livre.save
        mon_livre

Le résultat à la fin doit être le suivant :
    #<Book id: 1, title: "Dictionnaire">

Que s’est-il passé ? Book.new permet de créer un nouveau livre. Mais ça ne l’ajoute pas immédiatement dans la base de données. Avant cela, nous le stockons dans une variable et indiquons quel titre nous voulons pour lui. Je l’appelle « Dictionnaire ». C’est au moment du save que l’ajout en base de données est fait.

Quand je fais « mon_livre » tout seul, cela affiche tous ses attributs (comme « title »). Que remarquez-vous ? Il a un « id » à 1. Quand nous créons une table, il y a automatiquement une colonne « id » qui se met en place. Quand vous créez un livre, son id sera 1, puis le suivant 2, etc. Vous n’avez pas à toucher vous-même à cette valeur.

Pour retrouver les livres que vous avez créés, faites :

        Book.all

Bon, lire un dictionnaire n’est pas très cool, changeons son titre pour quelque chose d’autre :

        mon_livre = Book.find(1)
        mon_livre.title = "Pages Blanches"
        mon_livre.save

Pour modifier mon titre, tout ce que j’ai à faire, c’est chercher dans la base de données le livre à modifier, puis de changer son titre comme je l’ai fait la première fois. Book.find(1) permet de chercher le livre dont l’identifiant est 1.

Quelqu’un me souffle à l’oreillette que lire les Pages Blanches n’est pas très enthousiasmant non plus, alors supprimons-les :

        mon_livre = Book.find(1)
        mon_livre.destroy

Les commandes parlent d’elles-mêmes. D'ailleurs, il est tout à fait possible de les enchaîner :

        Book.find(1).destroy

Ainsi, même plus besoin de variable !

Si vous essayez cette deuxième méthode, une erreur va apparaître : à votre avis, pour quelle raison ?

Le livre est déjà supprimé, tout simplement ! Il n’est pas possible de supprimer deux fois un même élément. Pour testez cette 2e façon de faire, recréez un livre. Son identifiant sera 2 : celui-ci augmente même si le précédent a été supprimé.


    6.3- Utiliser les données sur le site

Vous savez manipuler vos données dans la console rails. Vous êtes vraiment très proche de savoir le faire sur votre site. Premièrement, ajoutez quelques livres à votre base de données, ça nous donnera de quoi travailler. J’en profite pour vous donner une syntaxe plus courte que celle vue au chapitre précédent :

        Book.create title: "Le Petit Prince"
        Book.create title: "Le Meilleur des mondes"
        Book.create title: "1984"

En une ligne, le create fait la même chose qu’un new et save. Pratique ! Nous voici donc avec trois livres en base.

Pour constater que tous ces éléments sont présents, vous pouvez faire un Book.all.

Le résultat est un tableau de livres :

#<ActiveRecord::Relation [#<Book id: 2, title: "Le petit prince">, #<Book id: 3, title: "Le Meilleur des mondes">, #<Book id: 4, title: "1984">]>

Vous êtes maintenant prêt à créer une page listant ces livres. Faites exit pour sortir de la console rails et revenir dans votre terminal.

Pour rappel, un contrôleur permet de gérer un ensemble de pages web. Pour ne pas mélanger ce sur quoi nous travaillons actuellement avec le code écrit précédemment, générez en un nouveau :

rails generate controller books index

C’est une bonne habitude avec Rails d’appeler un contrôleur comme la table qu’il concerne. C’est pourquoi je l’ai appelé « books ». Je veux que ce contrôleur gère une page qui liste mes livres. Par habitude, une page qui liste des choses, on l’appelle « index ». Toutes ces habitudes dont je vous parle sont très présentes chez les développeurs qui utilisent Rails. C’est bien de prendre le pli dès le début.

Le contrôleur « books » va regrouper les pages qui affichent et manipulent livres de notre base de données. Si vous souhaitez créer une nouvelle page qui n'a rien à voir avec cela, n'oubliez pas que vous avez toujours le contrôleur « pages » à votre disposition.

Voici à quoi ressemble le code généré par la commande précédente dans les répertoires app/controllers/ et app/views/ :

# app/controllers/books_controller.rb

        class BooksController < ApplicationController
          def index
          end
        end

# app/views/books/index.html.erb

        <h1>Books#index</h1>
        <p>Find me in app/views/books/index.html.erb</p>

Par convention dans ce cours, je précède chaque fragment de code par un croisillon (#) suivi du nom du fichier où ce fragment se situe. Dans votre éditeur de texte, vous ne verrez donc pas cette première ligne.

Vous savez que Book.all retourne un tableau de livres. Et vous savez comment faire une boucle dans une vue. Passez une minute à réfléchir à comment vous pourriez afficher la liste des livres sur votre page.

Voici la solution :

# app/controllers/books_controller.rb
        class BooksController < ApplicationController
          def index
            @les_livres = Book.all
          end
        end

# app/views/books/index.html.erb
        <% @les_livres.each do |un_livre| %>
          <p><%= un_livre.title %></p>
        <% end %>

J’ai utilisé les noms de variable « les_livres » et « un_livre » pour ne pas se mélanger dans les termes. Mais dans les règles de l’art, voici à quoi ressemblerait le code :

# app/controllers/books_controller.rb
        class BooksController < ApplicationController
          def index
            @books = Book.all
          end
        end

# app/views/books/index.html.erb

        <h1>Liste des livres</h1>

        <% @books.each do |book| %>
          <p><%= book.title %></p>
        <% end %>

La logique est la suivante : un tableau de « Book » s’appelle « books » (tableau = plusieurs = pluriel), auquel nous ajoutons un « @ » pour utiliser cette variable dans la vue ; et dans le each, nous appelons chaque livre « book », au singulier, vu qu’il n’y en a qu’un seul à la fois.

Lancez le serveur, affichez la page http://localhost:3000/books/index : les trois titres s’affichent !

La route /books/index n’est pas très élégante. Il serait plus sympathique d’avoir /books tout seul. Vous souvenez-vous de comment modifier une route ?

Pour se faire, ajoutez cette ligne dans le fichier config/routes.rb :
        get 'books' => 'books#index'

Observez le résultat : http://localhost:3000/books.
Récapitulatif du fonctionnement de Rails

    1- Un utilisateur demande l’affichage d’une page du site ;
    2- Le fichier des routes appelle la bonne fonction du bon contrôleur ;
    3- Si besoin, le contrôleur récupère, modifie ou supprime des données via le modèle ;
    4- Le modèle répercute ces modifications dans la base de données ;
    5- Le contrôleur appelle la vue, qui construit la page HTML ;
    6- Une fois la page HTML construite, celle-ci est envoyée au navigateur de l’utilisateur.


    6.4- Ajoutez un formulaire de création
Vous savez comment créer des données dans la console rails, vous savez comment afficher ces données sur une page web. Maintenant, voyons comment ajouter des données depuis cette page web.

Pour cela, il nous faut un formulaire sur notre page. Ce formulaire aura un champ texte pour le titre du livre, et un bouton « créer ».

Voici à quoi ressemblerait un formulaire classique en HTML pour notre situation :

        <form action="/books" method="post">
          <input type="text" name="title" />
          <input type="submit" value="Ajouter le livre" />
        </form>

Mais Rails a besoin de davantage d’éléments, notamment pour des raisons de sécurité. Afin que vous n’ayez pas à saisir tous ces éléments mystérieux à la main, Rails met à votre disposition un helper. Un helper est une fonction qui produit du HTML à votre place. Voici à quoi cela ressemble :

# app/views/books/index.html.erb

        <%= form_tag "/books", method: "post" do %>
          <input type="text" name="title" />
          <input type="submit" value="Ajouter le livre" />
        <% end %>

L’ouverture et la fermeture du formulaire ont changé, tout en gardant les éléments qui nous importent : les attributs html action et method se sont transformés en paramètres du helper form_tag.

La valeur « /books » de notre formulaire laisse penser que c’est la fonction index du BooksController qui va traiter nos données. En effet, nous avons une route qui dit cela :

        get 'books' => 'books#index'

Avec les routes et les contrôleurs, il est possible de séparer dans deux fonctions différentes le traitement d’une page en fonction de si l’on arrive dessus avec get ou avec post. Concrètement, qu’est-ce que cela donne ?

# config/routes.rb

        get 'books' => 'books#index'
        post 'books' => 'books#create'

# app/controllers/books_controller.rb

        class BooksController < ApplicationController
          def index
            @books = Book.all
          end

          def create
            # ...
          end
        end

Voilà : quand nous cliquons sur le bouton « Ajouter le livre », c’est le code de la fonction create de BooksController qui sera exécuté.

Que mettre dans la fonction create ? Si vous avez bien suivi, vous vous doutez qu’il y aura, au choix, un Book.new ou un Book.create. Mais il vous manque une information : comment récupérer ce que l’utilisateur a saisi dans le formulaire ?

La réponse est la suivante : la variable params. C’est une variable de type Hash dont les clés coïncident avec les attributs name du formulaire, et les valeurs sont les saisies de l’utilisateur. Par exemple : params[:title].

Vous ne vous souvenez plus de ce qu’est un Hash ? Rendez-vous dans ce chapitre du cours de Ruby.

Bien ! Nous avons tout ce qu’il nous faut pour remplir notre fonction create :

        def create
          Book.create title: params[:title]
        end

Est-ce qu’il faut créer une nouvelle vue pour cette fonction ? A priori, oui… mais cette vue serait exactement la même que l’index. Il ne serait pas très élégant de dupliquer le code de la vue. Je vous présente une astuce : la redirection. Une redirection permet de rediriger le navigateur vers une autre route. Par exemple :

        def create
          Book.create title: params[:title]
          redirect_to "/books"
        end

Et hop ! Juste après la création du livre, le navigateur retournera sur http://localhost:3000/books, dont la route vous emmènera dans la fonction index, qui affichera la bonne vue.

Attention ! N’oubliez pas le « / » de « /books ». Sinon la redirection aboutirait à http://localhost:3000books. Le « books » se retrouvant collé au port 3000, votre navigateur n’aura plus aucune idée de ce qu’il faut faire et le message d’erreur ne vous sera d’aucune aide.

Voici un récapitulatif du contrôleur :

# app/controllers/books_controller.rb

        class BooksController < ApplicationController
          def index
            @books = Book.all
          end

          def create
            Book.create title: params[:title]
            redirect_to "/books"
          end
        end

Ajoutez quelques livres avec votre formulaire fraîchement réalisé :)

Essayez de changer le Book.create par un Book.new en faisant en sorte que l’ajout de livre fonctionne toujours aussi bien. L’un n’est pas mieux que l’autre, c’est une question de goût.

Vous rencontrez des difficultés à passer d’un Book.create à un Book.new ? N’hésitez pas à relire le chapitre 3 de cette partie du cours.